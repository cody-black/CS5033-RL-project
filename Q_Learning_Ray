# -*- coding: utf-8 -*-
"""
Created on Thu Oct  1 10:31:26 2020

@author: Reza
"""

import gym
import ModifiedLL as Lander
import numpy as np
import random
from IPython.display import clear_output
import math 

#env = gym.make("LunarLander-v2").env
env=Lander.LunarLander()
LL = Lander.LunarLander()

#Q= np.zeros([env.observation_space.n, env.action_space.n])
#print(Q)

print(env.action_space)
print(LL.observation_space.high)
print(LL.observation_space.low)
print(LL.observation_space.shape[0])

LL.observation_space.bounded_above

LL.lander.position
LL.lander.position.x
tempx=[]
tempy=[]

env.reset()
extrema = []

#ppend(x[0][3])
        #print("x speed",x[0][2],"y speed",x[0][3], "reward", x[1])
        
#extrema.append(min(tempx))
#extrema.append(max(tempy))
#print(extrema)

n=15
ss = (2-(-2))/n

q_table = np.zeros([2*(n**3)+1,4])


# Hyperparameters
alpha = 0.1
gamma = 0.6
epsilon = 0.4

# For plotting metrics
all_epochs = []
all_penalties = []


for i in range(1, 500):
    
    state = int(env.reset()[8])
    epochs, reward, = 0, 0
    done = False
    
    while not done:
        if random.uniform(0, 1) < epsilon:
            action = env.action_space.sample() # Explore action space
        else:
            action = np.argmax(q_table[state]) # Exploit learned values
    
            next_state, reward, done, info = env.step(action,n)
            
            next_state = int(next_state[8])
            
            old_value = q_table[state, action]
            next_max = np.max(q_table[next_state])
            
            new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)
            q_table[state, action] = new_value
    
            state = next_state
            epochs += 1
        
    if i % 100 == 0:
        clear_output(wait=True)
        print(f"Episode: {i}")
        
print("Training finished.\n")




"""Evaluate agent's performance after Q-learning"""

total_epochs, total_penalties = 0, 0
episodes = 250
rew = []
sumarr=[]
for _ in range(episodes):
    state = int(env.reset()[8])
    epochs, reward = 0, 0
    
    done = False
    
    temp=[]
    while not done:
        action = np.argmax(q_table[state])
        state, reward, done, info = env.step(action,n)
        state = int(state[8])
        temp.append(reward)
        epochs += 1
        
    total_epochs += epochs
    rew.append(max(temp))
    sumarr.append(sum(temp))    
print("MAX REWARDS:",rew)
print("SUM OF REWARDS:",sumarr)
print(f"Results after {episodes} episodes:")







